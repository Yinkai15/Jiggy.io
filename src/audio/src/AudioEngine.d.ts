import { LogManager } from '@jiggy/utils';
import { Asset } from '@jiggy/assets';
export declare abstract class AudioEngine {
    logManager: LogManager;
    private _audioMap;
    constructor();
    addAudio(name: string, audio: Asset, channels?: number): void;
    hasAudio(name: string): boolean;
    removeAudio(name: string): void;
    releaseAssets(): void;
    playAudio(name: string): void;
    pauseAudio(name: string): void;
    stopAudio(name: string): void;
    isAudioLooping(name: string): boolean;
    loopAudio(name: string, state: boolean): void;
    isAudioMuted(name: string): boolean;
    muteAudio(name: string, state: boolean): void;
    getAudioDuration(name: string): number;
    setTimeCursor(name: string, seconds: number): void;
    getTimeCursor(name: string): number;
    setVolume(name: string, volume: number): void;
    getVolume(name: string): number;
    protected _setAudio(name: string, audio: Asset, channels: number): void;
    protected _warnMissingAudio(name: string): void;
    protected _getAudio(name: string, justGiveChannel1?: boolean): Asset;
    protected _getData(audio: Asset): Object;
    protected _attachStartEvent(asset: Asset): void;
    protected _attachEndEvent(asset: Asset): void;
    protected _registerEvents(channelArray: Asset[]): void;
    protected abstract _playAudio(audio: Asset): void;
    protected abstract _pauseAudio(audio: Asset): void;
    protected abstract _stopAudio(audio: Asset): void;
    protected abstract _isAudioLooping(audio: Asset): boolean;
    protected abstract _loopAudio(audio: Asset, state: boolean): void;
    protected abstract _isAudioMuted(audio: Asset): boolean;
    protected abstract _muteAudio(audio: Asset, state: boolean): void;
    protected abstract _getAudioDuration(audio: Asset): number;
    protected abstract _setTimeCursor(audio: Asset, seconds: number): void;
    protected abstract _getTimeCursor(audio: Asset): number;
    protected abstract _setVolume(audio: Asset, volume: number): void;
    protected abstract _getVolume(audio: Asset): number;
    protected abstract _registerStartEvent(audio: Asset): void;
    protected abstract _registerEndEvent(audio: Asset): void;
}
